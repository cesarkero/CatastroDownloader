% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/catastroprovince.R
\name{catastroprovince}
\alias{catastroprovince}
\title{catastroprovince}
\usage{
catastroprovince(
  province = "Melilla",
  catastropush = "http://www.catastro.minhap.es/INSPIRE/buildings/ES.SDGC.bu.atom.xml",
  tempdir = "./temp/",
  output = "./output/",
  rpush = TRUE,
  overwrite = TRUE,
  Hfloor = 3
)
}
\arguments{
\item{province}{--> is a string with the name of the provoince of interest (can be checked with FeedProvinces())}

\item{catastropush}{--> url of the atom service (xml url)}

\item{tempdir}{--> directory where temporal files are unziped and readed}

\item{output}{--> directory where gpkg is exported}

\item{rpush}{--> TRUE if you want a notification when process is over (use just if configured)}

\item{overwrite}{--> TRUE if you want to overwrite gpkg file in case it exist}

\item{Hfloor}{--> set the desired height (m) for each floor above the ground (to estimate building height)}
}
\value{
gpkgname as the directory of the gpkg file created after the process
}
\description{
catastroprovince is a function that download all the catastro data types from
a list of municipalities within a province and exports the data to a gpkg. The buildings and buildingparts contain
both heigth estimation (based on Hfloor) and Municipality
}
\examples{
\dontrun{
#-------------------------------------------------------------------------------
# Catch Provinces Names in atom service
FeedProvinces(catastropush)

# Create the list of Provinces of interest
provinceslist <- c("Ceuta","Melilla")

#-------------------------------------------------------------------------------
# +++++++++++++++++++++ LINUX TESTS ++++++++++++++++++++++++++++++++++++++++++++
#-------------------------------------------------------------------------------
# TEST 1 --> Download Full province
#-------------------------------------------------------------------------------
catastroprovince('Ceuta', catastropush, tempfolder, output, rpush = TRUE, overwrite = FALSE)

#---------------------------------------------------------------------------
# TEST 2 --> Dowload Provinces in Parallel
#-------------------------------------------------------------------------------
cl <- parallel::makeCluster(ncores, type="FORK")
doParallel::registerDoParallel(cl)

foreach(i=provinceslist) \%dopar\% {
    catastroprovince(i,catastropush, tempdir, output, rpush, overwrite)}

stopCluster(cl)

#-------------------------------------------------------------------------------
# ++++++++++++++++++++++ WINDOWS TESTS +++++++++++++++++++++++++++++++++++++++++
#-------------------------------------------------------------------------------
# TEST 1 --> Download Full province
#-------------------------------------------------------------------------------
catastroprovince('Melilla',catastropush, tempfolder, output, rpush = TRUE, overwrite = TRUE)

#---------------------------------------------------------------------------
# TEST 2 --> Dowload Provinces in Parallel
#-------------------------------------------------------------------------------
cl <- parallel::makeCluster(ncores, type="PSOCK")
doParallel::registerDoParallel(cl)
clusterEvalQ(cl, library("CatastroDownloader")) # load libraries
clusterExport(cl, c('catastropush', 'output', 'tempdir', 'ncores'))

foreach(i=provinceslist) \%dopar\% {
    catastroprovince(i,catastropush, tempdir, output, rpush, overwrite)}

stopCluster(cl)

#-------------------------------------------------------------------------------
# ++++++++++++++++++++++ SHOW SOMETHING  +++++++++++++++++++++++++++++++++++++++++
#-------------------------------------------------------------------------------
# show some data
file <- paste0(output, 'Catastro_Ceuta_2021-01-26.gpkg')
layer <- st_read(file, 'buildingpart')
mapview(layer)
#' }
}
